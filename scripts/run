#!/usr/bin/env python

import sys
import time

from peakinvestigator import PeakInvestigatorSaaS
from peakinvestigator.actions import InitAction
from peakinvestigator.actions import RunAction
from peakinvestigator.actions import PiVersionsAction

__VERSION__ = "5.4"
__PIVERSION__ = "2.0"

def validate_credentials(server, username, password):
	action = PiVersionsAction(__VERSION__, username, password)
	server = PeakInvestigatorSaaS(server)
	response = server.execute(action)
	action.process_response(response)
	
	return action.error
	

def run_job(args, password):
	with open(args.file) as f:
		lines = f.readlines()
		
	server = PeakInvestigatorSaaS(args.server)

	for line in lines:
		if line[0] == "#":
			continue

		filename, count, min_mass, max_mass, points = line.split()
		
		init_action = InitAction(__VERSION__, args.username, password, args.project, __PIVERSION__).with_scan_count(count, 0).with_meta_data(min_mass, max_mass, points)
		response = server.execute(init_action)
		init_action.process_response(response)
		
		if init_action.error is not None:
			sys.exit("Problem initializing {} job: {}.".format(filename, init_action.error))
			
		run_action = RunAction(__VERSION__, args.username, password, init_action.job, args.rto).with_files(filename)
		response = server.execute(run_action)
		run_action.process_response(response)
		
		if run_action.error is not None:
			sys.exit("Problem running {} job: {}.".format(filename, run_action.error))
		else:
			print("Running {} as {}".format(filename, run_action.job))
		
		time.sleep(1)
		
	
if __name__ == "__main__":

	import os.path

	from argparse import ArgumentParser
	from getpass import getpass
	
	parser = ArgumentParser(description="Run a file already on server.")
	parser.add_argument("--username", help="Veritomyx username", default="")
	parser.add_argument("--project", help="Veritomyx project ID", default="")
	parser.add_argument("--server", help="PeakInvestigator server", default="peakinvestigator.veritomyx.com")
	parser.add_argument("--rto", help="Desired response time objective", default="RTO-24")
	parser.add_argument("file", help="File containing info to submit jobs")
	
	args = parser.parse_args()
	
	if args.username == "":
		parser.error("\nVeritomyx username needs to be specified (--username).")
		
	if args.project == "":
		parser.error("\nVeritomyx project ID needs to be specified (--project).")
		
	if not os.path.exists(args.file):
		parser.error("\nUnable to find file: {}.".format(args.file))

	password = getpass("Password? ")
	
	error = validate_credentials(args.server, args.username, password)
	if error is not None:
		parser.error('\nProblem connecting to PeakInvestigator: {}'.format(error))
	
	run_job(args, password)

	